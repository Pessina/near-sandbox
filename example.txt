INPUTS

auth: 0x0000000000000000000000000000000000000000000000000000000000000040baf7afd06ef6b9cbe9ae8ff06724e33014631b9ce01be6bfb2f4c77084317fb40000000000000000000000000000000000000000000000000000000000000041b3ff5014be6df058155423b518e854860b1289b98f996d3ca3ce5d8db895b54463d8c00ba3a4668151eec28d9eae2081a3326856f8d5dbb06889186ed413fd1b0100000000000000000000000000000000000000000000000000000000000000

sender: 0x889E6a9d863373A7A735AB71Cd481e63ef8d64A4

kernelReponse: 

utxoPubKey: 0x0267ec0b1f94cea5a22511f0925e27fd7de087dfe13d4abe243ded4c94b1573ff0

-------

OUTPUT

should see recover suceful

-------

FUNCTION

func testDecodeAuth(auth []byte, sender common.Address, kernelResponse []byte, utxoPubKey []byte) error {
	log.Printf("test decoding auth")

	signatureTokenType, _ := abi.NewType("bytes", "", nil)
	nonceType, _ := abi.NewType("bytes32", "", nil)

	authArgs := abi.Arguments{
		{Type: signatureTokenType},
		{Type: nonceType},
	}

	unpacked, err := authArgs.Unpack(auth)
	if err != nil {
		log.Printf("Error unpacking auth: %v", err)
		return err
	}

	signatureToken, nonce := unpacked[0], unpacked[1]
	signatureTokenBytes, ok := signatureToken.([]byte)
	if !ok {
		return errors.New("signature token is not a byte array")
	}

	// Convert nonce to bytes32
	var nonceBytes [32]byte
	nonceArray, ok := nonce.([32]byte)
	if !ok {
		return errors.New("nonce is not a byte array")
	}
	copy(nonceBytes[:], nonceArray[:])

	log.Printf("signatureToken: 0x%s", hex.EncodeToString(signatureTokenBytes))
	log.Printf("nonce: %s", common.BytesToHash(nonceBytes[:]).Hex())
	log.Printf("kernelResponse: 0x%s", hex.EncodeToString(kernelResponse))

	// Recreate data digest that was signed
	kernelResponsesDigest := crypto.Keccak256Hash(kernelResponse)
	dataDigest := crypto.Keccak256(sender.Bytes(), common.BytesToHash(nonceBytes[:]).Bytes(), kernelResponsesDigest.Bytes(), utxoPubKey)

	// Recover public key from signature
	pubKeyBytes, err := crypto.Ecrecover(dataDigest, signatureTokenBytes)
	if err != nil {
		log.Printf("Error recovering public key: %v", err)
		return err
	}

	// Convert to public key
	pubKey, err := crypto.UnmarshalPubkey(pubKeyBytes)
	if err != nil {
		log.Printf("Error unmarshaling public key: %v", err)
		return err
	}

	// Get address from public key
	recoveredAddr := crypto.PubkeyToAddress(*pubKey)

	// Compare with address from sender
	log.Printf("recoveredAddr: %s", recoveredAddr.String())
	log.Printf("sender: %s", sender.String())

	if recoveredAddr == sender {
		log.Printf("signature verification successful")
	} else {
		log.Printf("signature verification failed")
		return errors.New("signature verification failed")
	}

	kernelRespType, err := abi.NewType("tuple", "", []abi.ArgumentMarshaling{
		{Name: "price", Type: "string"},
		{Name: "transaction", Type: "bool"},
		{Name: "liquidity", Type: "tuple", Components: []abi.ArgumentMarshaling{
			{Name: "balance", Type: "string"},
			{Name: "sufficient", Type: "bool"},
			{Name: "required_amount", Type: "string"},
			{Name: "utxos", Type: "tuple[]", Components: []abi.ArgumentMarshaling{
				{Name: "TxID", Type: "string"},
				{Name: "vout", Type: "uint256"},
				{Name: "status", Type: "tuple", Components: []abi.ArgumentMarshaling{
					{Name: "confirmed", Type: "bool"},
					{Name: "block_hash", Type: "string"},
					{Name: "block_height", Type: "uint256"},
					{Name: "block_time", Type: "uint256"},
				}},
				{Name: "value", Type: "uint256"},
			}},
			{Name: "transactions", Type: "tuple[]", Components: []abi.ArgumentMarshaling{
				{Name: "TxID", Type: "string"},
				{Name: "version", Type: "uint256"},
				{Name: "locktime", Type: "uint256"},
				{Name: "vin", Type: "tuple[]", Components: []abi.ArgumentMarshaling{
					{Name: "TxID", Type: "string"},
					{Name: "vout", Type: "uint256"},
					{Name: "prevout", Type: "tuple", Components: []abi.ArgumentMarshaling{
						{Name: "ScriptPubKey", Type: "string"},
						{Name: "ScriptPubKeyAsm", Type: "string"},
						{Name: "ScriptPubKeyType", Type: "string"},
						{Name: "ScriptPubKeyAddr", Type: "string"},
						{Name: "Value", Type: "uint256"},
					}},
					{Name: "ScriptSig", Type: "string"},
					{Name: "ScriptSigAsm", Type: "string"},
					{Name: "Witness", Type: "string[]"},
					{Name: "IsCoinbase", Type: "bool"},
					{Name: "Sequence", Type: "uint256"},
				}},
				{Name: "vout", Type: "tuple[]", Components: []abi.ArgumentMarshaling{
					{Name: "ScriptPubKey", Type: "string"},
					{Name: "ScriptPubKeyAsm", Type: "string"},
					{Name: "ScriptPubKeyType", Type: "string"},
					{Name: "ScriptPubKeyAddr", Type: "string"},
					{Name: "Value", Type: "uint256"},
				}},
				{Name: "size", Type: "uint256"},
				{Name: "weight", Type: "uint256"},
				{Name: "SigOps", Type: "uint256"},
				{Name: "fee", Type: "uint256"},
				{Name: "status", Type: "tuple", Components: []abi.ArgumentMarshaling{
					{Name: "confirmed", Type: "bool"},
					{Name: "block_hash", Type: "string"},
					{Name: "block_height", Type: "uint256"},
					{Name: "block_time", Type: "uint256"},
				}},
			}},
			{Name: "fees", Type: "tuple", Components: []abi.ArgumentMarshaling{
				{Name: "fastestFee", Type: "uint256"},
				{Name: "halfHourFee", Type: "uint256"},
				{Name: "hourFee", Type: "uint256"},
				{Name: "economyFee", Type: "uint256"},
				{Name: "minimumFee", Type: "uint256"},
			}},
		}},
		{Name: "premium", Type: "string"},
	})
	if err != nil {
		log.Printf("Error creating kernel response type: %v", err)
		return err
	}

	kernelRespArgs := abi.Arguments{
		{Type: kernelRespType, Name: "kernelResp"},
	}

	unpacked, err = kernelRespArgs.Unpack(kernelResponse)
	if err != nil {
		log.Printf("Error unpacking kernel response: %v", err)
		return err
	}

	prettyJSON, err := json.MarshalIndent(unpacked, "", "    ")
	if err != nil {
		log.Printf("Error marshaling kernel response: %v", err)
		return err
	}
	log.Printf("Decoded kernel response:\n%s", string(prettyJSON))

	return nil
}