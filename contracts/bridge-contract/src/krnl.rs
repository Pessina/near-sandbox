use crate::*;

use ethabi::{decode, ParamType, Token};
use hex;
use bech32;
use sha3::{Digest, Keccak256};

fn decode_hex(hex_str: &str) -> Vec<u8> {
    hex::decode(hex_str.trim_start_matches("0x")).unwrap()
}

fn decode_bech32_address(addr: &str) -> Vec<u8> {
    let (hrp, data, variant) = bech32::decode(addr).expect("invalid bech32 address");

    near_sdk::log!("hrp: {}", hrp);
    // We expect hrp to be "tb1" for testnet4
    assert!(hrp == "tb", "Expected testnet4 address starting with tb1");
    assert!(variant == bech32::Variant::Bech32 || variant == bech32::Variant::Bech32m);

    let data_u5: Vec<bech32::u5> = data
        .into_iter()
        .map(|x| bech32::u5::try_from_u8(x.into()).unwrap())
        .collect();

    let witness_version = data_u5[0].to_u8();
    if witness_version != 0 {
        panic!("Unexpected witness version, expected 0");
    }

    let wp = bech32::convert_bits(&data_u5[1..], 5, 8, false)
        .expect("invalid witness program conversion");

    wp
}

#[near]
impl Contract {
    pub fn is_krnl_authorized(
        &self,
        auth: String,
        sender: String,
        recipient: String,
        kernel_response: String,
    ) -> bool {
        let sender = decode_hex(&sender);
        let recipient_script = decode_bech32_address(&recipient);
        near_sdk::log!("recipient_script: {:?}", hex::encode(&recipient_script));
        let auth = decode_hex(&auth);
        let kernel_response = decode_hex(&kernel_response);

        let signature_token_type = ParamType::Bytes;
        let nonce_type = ParamType::FixedBytes(32);
        let auth_args = vec![signature_token_type, nonce_type];

        let unpacked = match decode(&auth_args, &auth) {
            Ok(u) => u,
            Err(e) => {
                println!("Error unpacking auth: {:?}", e);
                return false;
            }
        };

        let signature_token = match &unpacked[0] {
            Token::Bytes(b) => b.clone(),
            _ => {
                println!("signature token is not bytes");
                return false;
            }
        };

        let nonce = match &unpacked[1] {
            Token::FixedBytes(n) => n.clone(),
            _ => {
                println!("nonce is not bytes32");
                return false;
            }
        };

        let mut nonce_bytes = [0u8; 32];
        nonce_bytes.copy_from_slice(&nonce);

        println!("sender: 0x{}", hex::encode(&sender));
        println!("recipient: {}", recipient);
        println!("nonce: 0x{}", hex::encode(&nonce_bytes));
        println!("kernelResponse: 0x{}", hex::encode(&kernel_response));
        println!("signatureToken: 0x{}", hex::encode(&signature_token));

        let kernel_responses_digest = {
            let hash = Keccak256::digest(&kernel_response);
            let mut out = [0u8; 32];
            out.copy_from_slice(&hash);
            out
        };

        // Important: match the order used in the Go code
        // Go: dataDigest = keccak256(nonce, sender, recipient.ScriptAddress(), kernelResponsesDigest)
        let data_digest = {
            let mut hasher = Keccak256::new();
            hasher.update(&nonce_bytes);
            hasher.update(&sender);
            hasher.update(&recipient_script);
            hasher.update(&kernel_responses_digest);
            let hash = hasher.finalize();
            let mut out = [0u8; 32];
            out.copy_from_slice(&hash);
            out
        };

        let recovered_addr = {
            use k256::ecdsa::{RecoveryId, Signature as K256Signature, VerifyingKey};
            if signature_token.len() != 65 {
                println!("Invalid signature length: {}", signature_token.len());
                return false;
            }
            let (r_s_bytes, v_byte) = signature_token.split_at(64);
            let v = v_byte[0];
            let rec_id = if v >= 27 { v - 27 } else { v };

            let signature = match K256Signature::try_from(r_s_bytes) {
                Ok(sig) => sig,
                Err(e) => {
                    println!("Error parsing signature: {:?}", e);
                    return false;
                }
            };

            let recovery_id = match RecoveryId::try_from(rec_id) {
                Ok(rid) => rid,
                Err(e) => {
                    println!("Error parsing recovery id: {:?}", e);
                    return false;
                }
            };

            let verifying_key =
                match VerifyingKey::recover_from_prehash(&data_digest, &signature, recovery_id) {
                    Ok(vk) => vk,
                    Err(e) => {
                        println!("Error recovering verifying key: {:?}", e);
                        return false;
                    }
                };

            let public_key = verifying_key.to_encoded_point(false);
            let mut hasher = Keccak256::new();
            hasher.update(&public_key.as_bytes()[1..]);
            let hash = hasher.finalize();
            let mut addr = [0u8; 20];
            addr.copy_from_slice(&hash[12..32]);
            addr
        };

        println!("recoveredAddr: 0x{}", hex::encode_upper(&recovered_addr));
        println!("sender: 0x{}", hex::encode_upper(&sender));

        if recovered_addr == sender.as_slice() {
            println!("signature verification successful");
            true
        } else {
            println!("signature verification failed");
            false
        }
    }

    pub fn decode_krnl_response(&self, kernel_response: String) -> String {
        let kernel_response = decode_hex(&kernel_response);

        // logs[]: each log is a tuple
        let log_type = ParamType::Tuple(vec![
            ParamType::Address,
            ParamType::Array(Box::new(ParamType::FixedBytes(32))),
            ParamType::Bytes,
            ParamType::Uint(64),
            ParamType::FixedBytes(32),
            ParamType::Uint(64),
            ParamType::FixedBytes(32),
            ParamType::Uint(64),
            ParamType::Bool,
        ]);

        // receipt: a tuple
        let receipt_type = ParamType::Tuple(vec![
            ParamType::Address,
            ParamType::Address,
            ParamType::Uint(8),
            ParamType::FixedBytes(32),
            ParamType::Uint(64),
            ParamType::FixedBytes(32),
            ParamType::Uint(64),
            ParamType::Uint(64),
            ParamType::Uint(64),
            ParamType::Uint(64),
            ParamType::Uint(8),
            ParamType::FixedBytes(32),
            ParamType::Array(Box::new(log_type)),
        ]);

        // transaction: tuple(verified:bool, receipt:receipt_type)
        let transaction_type = ParamType::Tuple(vec![
            ParamType::Bool,
            receipt_type,
        ]);

        // utxos[]: each utxo is (string, uint64, (bool,string,uint64,uint64), uint256)
        let utxo_status_type = ParamType::Tuple(vec![
            ParamType::Bool,
            ParamType::String,
            ParamType::Uint(64),
            ParamType::Uint(64),
        ]);

        let utxo_type = ParamType::Tuple(vec![
            ParamType::String,
            ParamType::Uint(64),
            utxo_status_type,
            ParamType::Uint(256),
        ]);

        // fees tuple
        let fees_type = ParamType::Tuple(vec![
            ParamType::Uint(64),
            ParamType::Uint(64),
            ParamType::Uint(64),
            ParamType::Uint(64),
            ParamType::Uint(64),
        ]);

        // input_utxos[]: each (txid:string, vout:uint64, value:uint256, script_pubkey:string)
        let input_utxo_type = ParamType::Tuple(vec![
            ParamType::String,
            ParamType::Uint(64),
            ParamType::Uint(256),
            ParamType::String,
        ]);

        // output_utxos[]: same structure as input_utxos
        let output_utxo_type = input_utxo_type.clone();

        // liquidity tuple
        let liquidity_type = ParamType::Tuple(vec![
            ParamType::String,                     // balance
            ParamType::String,                     // total_input_amount
            ParamType::String,                     // required_amount
            ParamType::String,                     // change_amount
            ParamType::String,                     // estimated_fee
            ParamType::String,                     // actual_fee
            ParamType::Bool,                       // sufficient
            ParamType::Array(Box::new(utxo_type)), // utxos
            fees_type,                             // fees
            ParamType::Array(Box::new(input_utxo_type)),  // input_utxos
            ParamType::Array(Box::new(output_utxo_type)), // output_utxos
            ParamType::String,                     // lp_pubkey
        ]);

        // kernelResp tuple
        let kernel_resp_type = ParamType::Tuple(vec![
            ParamType::String,      // price
            transaction_type,       // transaction
            ParamType::String,      // premium
            liquidity_type,         // liquidity
        ]);

        let params = vec![kernel_resp_type];
        let tokens = decode(&params, &kernel_response).unwrap();

        let val = serde_json::to_string_pretty(&tokens).unwrap();
        println!("Decoded kernel response:\n{}", val);
        val
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_example() {
        // You will provide `auth` and other fields later
        let auth = "0000000000000000000000000000000000000000000000000000000000000040e8cee009703ea25599a200dafd4ac1343ec6129e004edb98099db5a531b5238500000000000000000000000000000000000000000000000000000000000000415f8cc7a1fcc88fe84073574aaf4f07d7349dacb06f92b5653a1bb36e63b908580837ddbb2a4819437764ee3c9c1920bf21ce9d18b5bd189aec20aa1280ab8c9e0000000000000000000000000000000000000000000000000000000000000000";
        let sender ="889E6a9d863373A7A735AB71Cd481e63ef8d64A4";
        let recipient ="tb1qh4tnh45v4ulprt0ruyct6p33ej3mh28jsd656k";
        let kernel_response ="

        let contract = Contract::new("example.testnet".parse().unwrap());
        let _is_authorized = contract.is_krnl_authorized(
            auth.to_string(),
            sender.to_string(),
            recipient.to_string(),
            kernel_response.to_string(),
        );

        // let _decoded_response = contract.decode_krnl_response(kernel_response.to_string());
    }
}
