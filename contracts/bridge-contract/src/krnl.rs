use crate::*;

use ethabi::{decode, ParamType, Token};
use k256::ecdsa::{Signature as K256Signature, RecoveryId, VerifyingKey};
use sha3::{Digest, Keccak256};
use hex;
use std::convert::TryInto;

fn decode_hex(hex_str: &str) -> Vec<u8> {
    hex::decode(hex_str.trim_start_matches("0x")).unwrap()
}

fn keccak256(data: &[u8]) -> [u8; 32] {
    let hash = Keccak256::digest(data);
    let mut out = [0u8; 32];
    out.copy_from_slice(&hash);
    out
}

fn recover_eth_address(message_hash: &[u8; 32], signature: &[u8]) -> Option<[u8; 20]> {
    if signature.len() != 65 {
        println!("Invalid signature length: {}", signature.len());
        return None;
    }

    let (r_s_bytes, v_byte) = signature.split_at(64);
    let v = v_byte[0];
    let rec_id = if v >= 27 { v - 27 } else { v };

    let signature = K256Signature::try_from(r_s_bytes).ok()?;
    let recovery_id = RecoveryId::try_from(rec_id).ok()?;

    let verifying_key = VerifyingKey::recover_from_prehash(message_hash, &signature, recovery_id).ok()?;
    let public_key = verifying_key.to_encoded_point(false);

    // Ethereum address derivation
    let mut hasher = Keccak256::new();
    hasher.update(&public_key.as_bytes()[1..]);
    let hash = hasher.finalize();

    let mut addr = [0u8; 20];
    addr.copy_from_slice(&hash[12..32]);
    Some(addr)
}

#[near]
impl Contract {
    pub fn is_krnl_authorized(
        &self,
        auth: String,
        sender: String,
        kernel_response: String,
        utxo_pub_key: String,
    ) -> bool {
        let sender: [u8; 20] = decode_hex(&sender).try_into().expect("address should be 20 bytes");
        println!("test decoding auth");

        // Decode auth: (bytes (signatureToken), bytes32 (nonce))
        let param_types = vec![
            ParamType::Bytes,
            ParamType::FixedBytes(32),
        ];

        let auth = decode_hex(&auth);
        let tokens = decode(&param_types, &auth).map_err(|e| format!("Error unpacking auth: {:?}", e)).unwrap();
        
        let signature_bytes = match &tokens[0] {
            Token::Bytes(b) => b.clone(),
            _ => panic!("signature token is not bytes")
        };
        let nonce = match &tokens[1] {
            Token::FixedBytes(n) => n.clone(),
            _ => panic!("nonce is not bytes32") 
        };

        let mut nonce_bytes = [0u8; 32];
        nonce_bytes.copy_from_slice(&nonce);

        // kernelResponsesDigest
        let kernel_responses_digest = keccak256(&decode_hex(&kernel_response));

        let utxo_pub_key = decode_hex(&utxo_pub_key);

        // dataDigest = keccak256(sender | nonce | kernelResponsesDigest | utxoPubKey)
        let mut data = vec![];
        data.extend_from_slice(&sender);
        data.extend_from_slice(&nonce_bytes);
        data.extend_from_slice(&kernel_responses_digest);
        data.extend_from_slice(&utxo_pub_key);
        let data_digest = keccak256(&data);

        // Recover address
        let recovered_addr = recover_eth_address(&data_digest, &signature_bytes).ok_or("Recover failed").unwrap();

        println!("recoveredAddr: 0x{}", hex::encode_upper(&recovered_addr));
        println!("sender: 0x{}", hex::encode_upper(sender));
        if recovered_addr == sender {
            println!("signature verification successful");
            true
        } else {
            println!("signature verification failed");
            false
        }
    }

    pub fn decode_krnl_response(&self, kernel_response: String) -> String {
        let status_type = ParamType::Tuple(vec![
            ParamType::Bool,             // confirmed
            ParamType::String,           // block_hash
            ParamType::Uint(256),        // block_height
            ParamType::Uint(256),        // block_time
        ]);

        let utxo_type = ParamType::Tuple(vec![
            ParamType::String,           // TxID
            ParamType::Uint(256),        // vout
            status_type.clone(),         // status
            ParamType::Uint(256),        // value
        ]);

        let fees_type = ParamType::Tuple(vec![
            ParamType::Uint(256), // fastestFee
            ParamType::Uint(256), // halfHourFee
            ParamType::Uint(256), // hourFee
            ParamType::Uint(256), // economyFee
            ParamType::Uint(256), // minimumFee
        ]);

        // transactions -> very complex structure:
        let prevout_type = ParamType::Tuple(vec![
            ParamType::String,
            ParamType::String,
            ParamType::String,
            ParamType::String,
            ParamType::Uint(256),
        ]);

        let vin_type = ParamType::Tuple(vec![
            ParamType::String,   // TxID
            ParamType::Uint(256),// vout
            prevout_type.clone(),
            ParamType::String,   // ScriptSig
            ParamType::String,   // ScriptSigAsm
            ParamType::Array(Box::new(ParamType::String)), // Witness
            ParamType::Bool,     // IsCoinbase
            ParamType::Uint(256),// Sequence
        ]);

        let vout_type = ParamType::Tuple(vec![
            ParamType::String,
            ParamType::String,
            ParamType::String,
            ParamType::String,
            ParamType::Uint(256),
        ]);

        let transaction_status_type = status_type.clone();

        let transaction_type = ParamType::Tuple(vec![
            ParamType::String,                   // TxID
            ParamType::Uint(256),                // version
            ParamType::Uint(256),                // locktime
            ParamType::Array(Box::new(vin_type)),// vin[]
            ParamType::Array(Box::new(vout_type)),// vout[]
            ParamType::Uint(256),                // size
            ParamType::Uint(256),                // weight
            ParamType::Uint(256),                // SigOps
            ParamType::Uint(256),                // fee
            transaction_status_type              // status
        ]);

        let liquidity_type = ParamType::Tuple(vec![
            ParamType::String,                    // balance
            ParamType::Bool,                      // sufficient
            ParamType::String,                    // required_amount
            ParamType::Array(Box::new(utxo_type)),// utxos
            ParamType::Array(Box::new(transaction_type)), // transactions
            fees_type
        ]);

        let kernel_resp_type = ParamType::Tuple(vec![
            ParamType::String,    // price
            ParamType::Bool,      // transaction
            liquidity_type,        // liquidity
            ParamType::String,    // premium
        ]);

        let params = vec![kernel_resp_type];
        let tokens = decode(&params, &decode_hex(&kernel_response)).map_err(|e| format!("Decode error: {:?}", e)).unwrap();

        // Print the decoded result as JSON for demonstration:
        // We won't fully map all tokens to a struct, just show them as debug output:
        let val = serde_json::to_string_pretty(&tokens).unwrap();
        println!("Decoded kernel response:\n{}", val);
        val
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_with_provided_data() {
        let auth = "0x0000000000000000000000000000000000000000000000000000000000000040baf7afd06ef6b9cbe9ae8ff06724e33014631b9ce01be6bfb2f4c77084317fb40000000000000000000000000000000000000000000000000000000000000041b3ff5014be6df058155423b518e854860b1289b98f996d3ca3ce5d8db895b54463d8c00ba3a4668151eec28d9eae2081a3326856f8d5dbb06889186ed413fd1b0100000000000000000000000000000000000000000000000000000000000000";
        let sender = "0x889E6a9d863373A7A735AB71Cd481e63ef8d64A4"; 
        let kernel_response = "";
        let utxo_pub_key ="0x0267ec0b1f94cea5a22511f0925e27fd7de087dfe13d4abe243ded4c94b1573ff0";

        let contract = Contract::new(
            "v1-signer-prod.testnet".parse().unwrap(),
        );


        // Check signature
        let is_authorized = contract.is_krnl_authorized(
            auth.to_string(),
            sender.to_string(),
            kernel_response.to_string(),
            utxo_pub_key.to_string(),
        );

        assert!(is_authorized);

        // Decode kernel response
        let decoded_response = contract.decode_krnl_response(kernel_response.to_string());
        
        assert!(!decoded_response.is_empty());
    }
}
